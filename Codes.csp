#define MAX 8;
#define DELAY 1; //every delay, the duration is assumed to be 1 hour
#define PROCESS 1; //every process takes 1 hour

var ItemProhibited; //0 for safe item and 1 for unsafe item
var PostageReq; //0 for frank mails and 1 for normal mails
var PostageFee; //0 for sufficient postage fees and 1 for insufficient postage fees

var EnvStd; //0 for non-standardized mail and 1 for standardized mail
var EnvColor; //0 for non-recommended mail and 1 for recommended mail
var IdTag; //0 for no id-tag and 1 for id-tag given
var SkipOcr; //0 for new operation and 1 for already OCR-ed mail
var MissedTag; //0 for id-tag not missed and 1 for id-tag missed
var RetFromBcs; //1 indicates mail brought back from BCS for no tag and 0 to clear the flag
var AddHw; //1 for legible handwriting and 0 for illegible handwriting
var time; //time taken for processsing
var batch=0;

//Initialization
//InitMail() = initProhibited{ItemProhibited = 1;} -> InitCfc()
//		[] initPostageSuff{ItemProhibited = 0; PostageReq = 1; PostageFee = 0;} -> InitCfc()
//		[] initPostageInsuff{ItemProhibited = 0; PostageReq = 1; PostageFee = 1;} -> InitCfc()
//		[] initPostageFree{ItemProhibited = 0; PostageReq = 0;} -> InitCfc();

//InitCfc() = initBadMailStd1{EnvStd = 0; EnvColor = 0;} -> MailChecker()
//          [] initBadMailStd2{EnvStd = 0; EnvColor = 1;} -> MailChecker()
//          [] initBadMailStd3{EnvStd = 1; EnvColor = 0;} -> MailChecker()
//          [] initGoodMailStd{EnvStd = 1; EnvColor = 1;} -> MailChecker();
		
MailChecker() = [ItemProhibited == 1]unsafeMail -> OFS()
			    [] [ItemProhibited == 0 && PostageReq == 1 && PostageFee == 0]safe_paid_mail -> Cfc()
				[] [ItemProhibited == 0 && PostageReq == 1 && PostageFee == 1]safe_unpaid_mail{time = time + DELAY;} -> Cfc()
				[] [ItemProhibited == 0 && PostageReq == 0]safe_prepaid_mail -> Cfc();
				
Cfc() = if(time < 8){[(EnvStd == 0 || EnvColor == 0) && MissedTag == 0 && RetFromBcs == 0]bad_mail_std{IdTag = 1; time = time + PROCESS + DELAY;} -> Skip
		[] [(EnvStd == 0 || EnvColor == 0) && MissedTag == 1 && RetFromBcs == 0]bad_mail_std_missed{IdTag = 0; time = time + PROCESS + DELAY;} -> Skip
		[] [EnvStd == 1 && EnvColor == 1 && MissedTag == 0 && RetFromBcs == 0]good_mail_std{IdTag = 1; time = time + PROCESS;}-> Skip
		[] [EnvStd == 1 && EnvColor == 1 && MissedTag == 1 && RetFromBcs == 0]good_mail_std_missed{IdTag = 0; time = time + PROCESS;}-> Skip
		[] [MissedTag == 1 && RetFromBcs == 1]mail_retag{MissedTag = 0; RetFromBcs = 0; SkipOcr = 1;} -> Skip
		};
//Mps() = InitMail() ||| InitCfc() ||| MailChecker() ||| Cfc();
//#assert Mps() deadlockfree;
//&& EnvStd == 0 && EnvColor == 0 && MissedTag == 0 && RetFromBcs == 0
//InitCfc() = initBadMailStd1{EnvStd = 0; EnvColor = 0;} -> Cfc()
//          [] initBadMailStd2{EnvStd = 0; EnvColor = 1;} -> Cfc()
//          [] initBadMailStd3{EnvStd = 1; EnvColor = 0;} -> Cfc()
//          [] initGoodMailStd{EnvStd = 1; EnvColor = 1;} -> Cfc();
//
//Cfc() = [(EnvStd == 0 || EnvColor == 0) && MissedTag == 0 && RetFromBcs == 0]bad_mail_std{IdTag = 1; time = time + PROCESS + DELAY;} -> InitOcr()
//		[] [(EnvStd == 0 || EnvColor == 0) && MissedTag == 1 && RetFromBcs == 0]bad_mail_std_missed{IdTag = 0; time = time + PROCESS + DELAY;} -> InitOcr()
//		[] [EnvStd == 1 && EnvColor == 1 && MissedTag == 0 && RetFromBcs == 0]good_mail_std{IdTag = 1; time = time + PROCESS;}-> InitOcr()
//		[] [EnvStd == 1 && EnvColor == 1 && MissedTag == 1 && RetFromBcs == 0]good_mail_std_missed{IdTag = 0; time = time + PROCESS;}-> InitOcr()
//		[] [MissedTag == 1 && RetFromBcs == 1]mail_retag{MissedTag = 0; RetFromBcs = 0; SkipOcr = 1;} -> Cfc();
		
//InitOcr() = initGoodHw{AddHw = 1;} -> Ocr()
//		[] initBadHw{AddHw = 0;} -> Ocr();
//
//Ocr() = [AddHw == 1 && SkipOcr == 0]good_mail_hw{time = time + PROCESS;} -> Skip
//		[] [AddHw == 0 && SkipOcr == 0]good_mail_hw{time = time + PROCESS + DELAY;} -> Skip
//		[] [SkipOcr == 1]mail_done_ocr -> Skip;
//		
//
//
//InitBcs() = Skip;



MPS() = MailChecker();
OFS() = Skip; //out of system



#define goal (ItemProhibited == 0 && PostageFee == 0 && PostageReq == 1 && EnvStd == 1 && EnvColor == 1 && MissedTag == 0 && RetFromBcs == 0 && time == 2);
#assert MailChecker() deadlockfree;
#assert Cfc() deadlockfree;
//#assert Ocr() deadlockfree;
//#assert MPS() |= <>
#assert MPS() reaches goal with max(batch);
#assert MPS() reaches goal;